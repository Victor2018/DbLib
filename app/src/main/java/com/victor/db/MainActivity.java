package com.victor.db;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.Button;import com.victor.db.library.dao.DbDao;import com.victor.db.library.data.Movie;import com.victor.db.library.util.Constant;import java.util.List;public class MainActivity extends AppCompatActivity implements View.OnClickListener {    private String TAG = "MainActivity";    private Button mBtnInsert,mBtnDelete,mBtnUpdate,mBtnQuery,mBtnQueryOther;    private DbDao dbDao;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        initialize();    }    private void initialize () {        dbDao = new DbDao(this);        mBtnInsert = (Button) findViewById(R.id.btn_insert);        mBtnDelete = (Button) findViewById(R.id.btn_delete);        mBtnUpdate = (Button) findViewById(R.id.btn_update);        mBtnQuery = (Button) findViewById(R.id.btn_query);        mBtnQueryOther = (Button) findViewById(R.id.btn_query_other);        mBtnInsert.setOnClickListener(this);        mBtnDelete.setOnClickListener(this);        mBtnUpdate.setOnClickListener(this);        mBtnQuery.setOnClickListener(this);        mBtnQueryOther.setOnClickListener(this);    }    private void initData () {        List<Movie> channels = query(true);        if (channels != null && channels.size() > 0) {            return;        }        for(int i=0;i<2;i++){            Movie channel = new Movie();            channel.setName("铁道飞虎" + i);            channel.setIcon(i + "xlj.png");            channel.setImg(i + "xlj1.png");            channel.setServer("192.168.1." + i);            channel.setChannelId("ADFLASJDIJASDASDFDSFS" + i);            channel.setLang("English");            channel.setArea("American");            channel.setYear("2015");            channel.setTime("1:30");            channel.setType("喜剧");            channel.setDirector("张艺谋");            channel.setMemo("影片简介：" + i);            channels.add(channel);        }        dbDao.insert(channels);    }    private void delete () {        dbDao.delete(Constant.Action.LIVE_ACTION, Constant.Action.LIVE_ACTION);    }    private void update () {        Movie channel = new Movie();        channel.setName("西游伏妖篇" + 0);        channel.setIcon("zyj.png");        channel.setImg("zyj1.png");        channel.setServer("128.0.0.1");        channel.setChannelId("ADFLASJDIJASDASDFDSFS0");        channel.setLang("中文2");        channel.setArea("中国2");        channel.setYear("2017");        channel.setTime("2:32");        channel.setType("喜剧爱情");        channel.setDirector("张艺谋2");        channel.setMemo("影片简介：俺老孙来也！！！");        dbDao.update(channel);    }    private List<Movie> query (boolean isLocalDb) {        List<Movie> movieList = dbDao.query(Constant.Action.LIVE_ACTION, Constant.Action.LIVE_ACTION,isLocalDb);        Log.e(TAG,"movieList.size() = " + movieList.size());        for (Movie info : movieList) {            Log.e(TAG,"info.getName() = " + info.getName());            Log.e(TAG,"info.getIcon() = " + info.getIcon());            Log.e(TAG,"info.getImg() = " + info.getImg());            Log.e(TAG,"info.getServer() = " + info.getServer());            Log.e(TAG,"info.getChannelId() = " + info.getChannelId());            Log.e(TAG,"info.getLang() = " + info.getLang());            Log.e(TAG,"info.getArea() = " + info.getArea());            Log.e(TAG,"info.getYear() = " + info.getYear());            Log.e(TAG,"info.getTime() = " + info.getTime());            Log.e(TAG,"info.getType() = " + info.getType());            Log.e(TAG,"info.getDirector() = " + info.getDirector());            Log.e(TAG,"info.getMemo() = " + info.getMemo());        }        return movieList;    }    @Override    public void onClick(View view) {        switch (view.getId()) {            case R.id.btn_insert:                initData();                break;            case R.id.btn_delete:                delete();                break;            case R.id.btn_update:                update();                break;            case R.id.btn_query:                query(true);                break;            case R.id.btn_query_other:                query(false);                break;        }    }}